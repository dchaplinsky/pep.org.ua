# coding: utf-8
from __future__ import unicode_literals

from django.db import models
from django.utils.translation import ugettext_lazy, ugettext_noop as _
from django.contrib.postgres.fields import JSONField as DjangoJSONField


class Rule(models.Model):
    RULES = {
        "PEP01": _("В декларації публічного діяча не вказані дружина та/або діти, однак інформація про них є в реєстрі pep.org.ua"),
        "PEP02": _(
            "Сукупна вартість майна, активів більша доходів в поточній декларації в 10+ раз в порівнянні з декларацією публічного діяча за попередній рік"
        ),
        "PEP03_home": _(
            "Декларант не зазначив вартості будинку/ів, що перебувають у його та членів родини власності починаючи з 2015 року"
        ),
        "PEP03_land": _(
            "Декларант не зазначив вартості земельної ділянки/нок, що перебувають у його та/або членів родини власності починаючи з 2015 року"
        ),
        "PEP03_avto": _(
            "Декларант не зазначив вартості транспортних засобів, що перебувають його та/або членів родини власності декларанта, членів родини починаючи з 2015 року"
        ),
        "PEP04_adress": _(
            "Відсутність нерухомості у власності/користуванні в населеному пункті проживання публічного діяч"
        ),
        "PEP04_region": _(
            "Відсутність нерухомості у власності/користуванні в регіоні проживання публічного діяча"
        ),
        "PEP05": _(
            "Публічний діяч задекларував збільшення сукупної вартості рухомого майна, нерухомого майна та готівки в 5 разів відносно попередньої декларації"
        ),
        "PEP07": _(
            "Публічний діяч задекларував отримання та повернення позики, що перевищує доходи у 2+ разів протягом одного календарного року"
        ),
        "PEP09": _(
            "Дохід від продажу майна/нерухомості в 2+ більше вартості майна в актуальній декларації - вартість майна в попередній декларації"
        ),
        "PEP10": _(
            "Доходи від викладацької, творчої діяльності та роботою за сумісництвом перевищують 30% сукупних доходів в декларації"
        ),
        "PEP11": _("Роялті перевищують 20% сукупних доходів в деклараці"),
        "PEP13": _(
            "Сума задекларованих доходів та грошових активів дорівнюють або менше витратам в декларації"
        ),
        "PEP15": _("Задекларовано отримання подарунків у розмірі 100+ тис. грн"),
        "PEP16": _("Задекларовано виграші в лотерею, призи вартістю 10+ тис. грн"),
        "PEP17": _(
            "Задекларовано власність авто від 2013 року випуску вартістю менше 150 тис. грн"
        ),
        "PEP18": _(
            "Задекларовано власність та/або право користування авто бізнес класу вартістю 800+ тис. грн. та/або брендового авто, яке відноситься до переліку люксових"
        ),
        "PEP19": _("Задекларовано власність та/або право користування 5+ авто на декларацію"),
        "PEP20": _(
            "Сукупна готівка декларанта та членів родини в декларації більше 1,5 млн гривень"
        ),
        "PEP21": _(
            "Задекларовані грошові активи поточного року більші суми доходів та грошових активів попереднього року"
        ),
        "PEP22": _(
            "Готівка в найпершій електронній декларації наявній в системі в 5 разів перевищує доходи зазначені в декларації за відповідний рік"
        ),
        "PEP23": _("Задекларовані витрати більші 75% сукупного доходу за період"),
        "PEP24": _("Публічний діяч не задекларував бенефіціарну власність компанії/ій, водночас в реєстрі і в pep.org.ua є інформація про таку бенефіціарну власність"),
        "PEP25": _(
            "Компанії, власником яких є декларант чи члени його родини отримали перерахування бюджетних коштів на суму 100+ тис. грн."
        ),
        "PEP26": _("Публічний діяч задекларував криптовалюту та/або доходи від криптовалюти"),
        "PEP27": _("Публічний діяч задекларував оренду жилої нерухомості площею більше 300 кв. м."),
    }

    id = models.CharField(
        "Ідентифікатор правила",
        max_length=15,
        choices=RULES.items(),
        default="p",
        primary_key=True,
    )

    template = models.TextField("Template to render flag details", blank=True)
    weight = models.FloatField("Weight of that rule")
    scale = models.FloatField("Scale that should be applied to the weight", default=1.0)


class Flag(models.Model):
    person = models.ForeignKey("Person", related_name="flags")
    rule = models.ForeignKey("Rule", related_name="flags")
    data = DjangoJSONField(default=dict)


    @property
    def comment(self):
        if self.rule.template:
            return self.rule.template.format(**self.data)
        else:
            return self.rule_name

    @property
    def rule_name(self):
        return unicode(ugettext_lazy(self.rule.get_id_display() or ""))
