# coding: utf-8
from __future__ import unicode_literals

from django.db import models
from django.utils.translation import ugettext_lazy, ugettext_noop as _
from django.contrib.postgres.fields import JSONField as DjangoJSONField


class Rule(models.Model):
    RULES = {
        "PEP01": _("не вказані дружина,діти що є в реєстрі PEP"),
        "PEP02": _(
            "сукупна вартість майна, активів більша доходів в поточній декларації в 10+ раз"
        ),
        "PEP03_home": _(
            "відсутність вартості будинків, що перебувають у власності декларанта, членів родини починаючи з 2015 року"
        ),
        "PEP03_land": _(
            "відсутність вартості землі, що перебувають у власності декларанта, членів родини починаючи з 2015 року"
        ),
        "PEP03_avto": _(
            "відсутність вартості транспортних засобів, що перебувають у власності декларанта, членів родини починаючи з 2015 року"
        ),
        "PEP04_adress": _(
            "відсутність нерухомості в власності/користуванні в населеному пункті проживання"
        ),
        "PEP04_region": _(
            "відсутність нерухомості в власності/користуванні в регіоні проживання"
        ),
        "PEP05": _(
            "збільшення сукупної вартості рухомого майно+нерухомого майно+готівка  в 5 разів відносно попередньої декларації"
        ),
        "PEP07": _(
            "отримання та повернення позики що перевищує доходи у 2+ разів протягом 1 календарного року"
        ),
        "PEP09": _(
            "дохід від продажу майна/нерухомості в 2+ більше вартості майна в актуальній декларації - вартість майна в попередній декларації"
        ),
        "PEP10": _(
            "доходи від викладацької, творчої діяльності та роботою за сумісництвом перевищують 30% сукупних доходів в декларації"
        ),
        "PEP11": _("роялті перевищують 20% сукупних доходів в декларації"),
        "PEP13": _(
            "сума задекларованих доходів та грошових активів  =< витратам в декларації"
        ),
        "PEP15": _("отримання подарунків у розмірі 100 тис.+"),
        "PEP16": _("виграші в лотерею, призи 10 тис.+"),
        "PEP17": _(
            "власність авто від 2013 року випуску  вартістю менше 150 тис. грн."
        ),
        "PEP18": _(
            "власність/право користування авто бізнес класу вартістю +800 тис. грн. чи бренд авто відноситься до переліку люксових авто"
        ),
        "PEP19": _("власність/право користування 5+ авто на декларацію "),
        "PEP20": _(
            "сукупна готівка декларанта та членів родини в декларації більше 1,5 млн гривень"
        ),
        "PEP21": _(
            "грошові активи поточного року більші суми доходів та грошових активів попереднього року "
        ),
        "PEP22": _(
            "готівка в найпершій електронній декларації наявній в системі в 5 разів перевищує доходи зазначені в декларації за відповідний рік"
        ),
        "PEP23": _("витрати більші 75% сукупного доходу за період"),
        "PEP24": _("відсутність бенефіціарної власності в декл порівн з реєстром PEP"),
        "PEP25": _(
            "компанії  власником  яких є декларант чи члени його родини отримали перерахування бюджетних коштів на сумму (+100 тис. грн.)"
        ),
        "PEP26": _("зазначення криптовалюти, доходів від криптовалюти"),
        "PEP27": _("в декларації зазначена оренда жилої нерухомості більше 300 м. кв."),
    }

    id = models.CharField(
        "Ідентифікатор правила",
        max_length=15,
        choices=RULES.items(),
        default="p",
        primary_key=True,
    )

    template = models.TextField("Template to render flag details", blank=True)
    weight = models.FloatField("Weight of that rule")


class Flag(models.Model):
    person = models.ForeignKey("Person", related_name="flags")
    rule = models.ForeignKey("Rule", related_name="flags")
    data = DjangoJSONField(default=dict)

    @property
    def comment(self):
        if self.rule.template:
            return self.rule.template.format(**self.data)
        else:
            return self.rule_name

    @property
    def rule_name(self):
        return unicode(ugettext_lazy(self.rule.get_id_display() or ""))
