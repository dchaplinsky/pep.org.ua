# coding: utf-8
from __future__ import unicode_literals

from django.db import models
from django.utils.translation import ugettext_lazy, ugettext_noop as _
from django.contrib.postgres.fields import JSONField as DjangoJSONField


class Rule(models.Model):
    RULES = {
        "PEP01": _("В декларації не вказані дружина та/або діти, однак інформація про них є в реєстрі pep.org.ua"),
        "PEP02": _(
            "Сукупна вартість майна та активів більша доходів за поточний рік в 10 чи більше разів"
        ),
        "PEP03_home": _(
            "Не зазначено вартості нерухомості, що перебувають у власності публічного діяча та членів його родини, починаючи з 2015 року"
        ),
        "PEP03_land": _(
            "Не зазначено вартості земельних ділянок, що перебувають у власності публічного діяча та членів його родини, починаючи з 2015 року"
        ),
        "PEP03_avto": _(
            "Не зазначено вартості транспортних засобів, що перебувають у власності публічного діяча та членів його родини, починаючи з 2015 року"
        ),
        "PEP04_adress": _(
            "Відсутність нерухомості у власності/користуванні в населеному пункті, зазначеному як місце проживання публічного діяча"
        ),
        "PEP04_region": _(
            "Відсутність нерухомості у власності/користуванні в регіоні, зазначеному як місце проживання публічного діяча"
        ),
        "PEP05": _(
            "Публічний діяч задекларував збільшення в 5 разів сукупної вартості рухомого та нерухомого майна, а також готівки відносно декларації попереднього року"
        ),
        "PEP07": _(
            "Протягом одного календарного року публічний діяч задекларував отримання та повернення позики, що перевищує доходи у 2 чи більше рази"
        ),
        "PEP09": _(
            "Дохід від продажу майна чи нерухомості в 2 чи більше рази більше вартості цього ж майна, внесеного до декларації попереднього року"
        ),
        "PEP10": _(
            "Доходи від викладацької, творчої діяльності та роботою за сумісництвом перевищують 30% сукупних доходів в декларації"
        ),
        "PEP11": _("Роялті перевищують 20% сукупних доходів в декларації"),
        "PEP13": _(
            "Cума задекларованих доходів та грошових активів менша або дорівнює витратам, зазначеним в декларації"
        ),
        "PEP15": _("Задекларовано отримання подарунків у розмірі більше 100 тис. грн"),
        "PEP16": _("Задекларовано виграші в лотерею чи призи вартістю більше 10 тис. грн"),
        "PEP17": _(
            "Задекларовано власність авто від 2013 року випуску вартістю менше 150 тис. грн"
        ),
        "PEP18": _(
            "Задекларовано власність та/або право користування автомобілем бізнес класу, чи авто вартістю більше 800 тис. грн. та/або авто, яке належить до переліку авто брендів класу люкс"
        ),
        "PEP19": _("Задекларовано власність та/або право користування більше 5 автомобілів"),
        "PEP20": _(
            "Cукупна готівка декларанта та членів родини в декларації більше 1,5 млн гривень"
        ),
        "PEP21": _(
            "Задекларовані грошові активи поточного року більші суми доходів та грошових активів попереднього року"
        ),
        "PEP22": _(
            "Готівка в найпершій електронній декларації наявній в системі в 5 чи більше разів перевищує доходи зазначені в декларації за відповідний рік"
        ),
        "PEP23": _("Задекларовані витрати більші 75% сукупного доходу за період"),
        "PEP24": _("Публічний діяч не задекларував бенефіціарну власність компанії/ій, водночас в реєстрі pep.org.ua є інформація про таку бенефіціарну власність"),
        "PEP25": _(
            "Компанії, власником чи контролером яких є декларант чи члени його/її родини отримали перерахування бюджетних коштів на суму більше 100 тис. грн."
        ),
        "PEP26": _("Публічний діяч задекларував криптовалюту та/або доходи від криптовалюти"),
        "PEP27": _("Публічний діяч задекларував оренду жилої нерухомості площею більше 300 м. кв."),
    }

    id = models.CharField(
        "Ідентифікатор правила",
        max_length=15,
        choices=RULES.items(),
        default="p",
        primary_key=True,
    )

    template = models.TextField("Template to render flag details", blank=True)
    weight = models.FloatField("Weight of that rule")
    scale = models.FloatField("Scale that should be applied to the weight", default=1.0)

    class Meta:
        verbose_name = "Правило скорингу"
        verbose_name_plural = "Правила скорингу"



class Flag(models.Model):
    person = models.ForeignKey("Person", related_name="flags")
    rule = models.ForeignKey("Rule", related_name="flags")
    data = DjangoJSONField(default=dict)


    @property
    def comment(self):
        if self.rule.template:
            return self.rule.template.format(**self.data)
        else:
            return self.rule_name

    @property
    def rule_name(self):
        return unicode(ugettext_lazy(self.rule.get_id_display() or ""))

    class Meta:
        verbose_name = "Червоний прапорець"
        verbose_name_plural = "Червоні прапорці"
